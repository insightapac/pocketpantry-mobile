/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IFoodItemsClient {
    getFoodItemAll(): Observable<FoodItem[] | null>;
    postFoodItem(foodItem: FoodItem | null): Observable<FileResponse | null>;
    getFoodItem(id: number): Observable<FileResponse | null>;
    putFoodItem(id: number, foodItem: FoodItem | null): Observable<FileResponse | null>;
    deleteFoodItem(id: number): Observable<FileResponse | null>;
    search(searchText: string): Observable<FileResponse | null>;
}

@Injectable()
export class FoodItemsClient implements IFoodItemsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getFoodItemAll(): Observable<FoodItem[] | null> {
        let url_ = this.baseUrl + "/api/FoodItems";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFoodItemAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFoodItemAll(<any>response_);
                } catch (e) {
                    return <Observable<FoodItem[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FoodItem[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetFoodItemAll(response: HttpResponseBase): Observable<FoodItem[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FoodItem.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FoodItem[] | null>(<any>null);
    }

    postFoodItem(foodItem: FoodItem | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/FoodItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(foodItem);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostFoodItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostFoodItem(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPostFoodItem(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    getFoodItem(id: number): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/FoodItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFoodItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFoodItem(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetFoodItem(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    putFoodItem(id: number, foodItem: FoodItem | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/FoodItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(foodItem);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutFoodItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutFoodItem(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPutFoodItem(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    deleteFoodItem(id: number): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/FoodItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFoodItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFoodItem(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFoodItem(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    search(searchText: string): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/FoodItems/Search/{searchText}";
        if (searchText === undefined || searchText === null)
            throw new Error("The parameter 'searchText' must be defined.");
        url_ = url_.replace("{searchText}", encodeURIComponent("" + searchText)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IPantryClient {
    getPantryAll(): Observable<Pantry[] | null>;
    postPantry(pantry: Pantry | null): Observable<FileResponse | null>;
    getPantry(id: number): Observable<FileResponse | null>;
    putPantry(id: number, pantry: Pantry | null): Observable<FileResponse | null>;
    deletePantry(id: number): Observable<FileResponse | null>;
}

@Injectable()
export class PantryClient implements IPantryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getPantryAll(): Observable<Pantry[] | null> {
        let url_ = this.baseUrl + "/api/Pantry";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPantryAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPantryAll(<any>response_);
                } catch (e) {
                    return <Observable<Pantry[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<Pantry[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPantryAll(response: HttpResponseBase): Observable<Pantry[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Pantry.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Pantry[] | null>(<any>null);
    }

    postPantry(pantry: Pantry | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Pantry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(pantry);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostPantry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostPantry(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPostPantry(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    getPantry(id: number): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Pantry/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPantry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPantry(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPantry(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    putPantry(id: number, pantry: Pantry | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Pantry/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(pantry);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutPantry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutPantry(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPutPantry(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    deletePantry(id: number): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Pantry/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletePantry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletePantry(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeletePantry(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IRecipesClient {
    getRecipeAll(): Observable<Recipe[] | null>;
    postRecipe(recipe: Recipe | null): Observable<FileResponse | null>;
    getRecipeCollection(): Observable<CategoryDto[] | null>;
    getRecipe(id: number): Observable<FileResponse | null>;
    putRecipe(id: number, recipe: Recipe | null): Observable<FileResponse | null>;
    deleteRecipe(id: number): Observable<FileResponse | null>;
}

@Injectable()
export class RecipesClient implements IRecipesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getRecipeAll(): Observable<Recipe[] | null> {
        let url_ = this.baseUrl + "/api/Recipes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecipeAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecipeAll(<any>response_);
                } catch (e) {
                    return <Observable<Recipe[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<Recipe[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecipeAll(response: HttpResponseBase): Observable<Recipe[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Recipe.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Recipe[] | null>(<any>null);
    }

    postRecipe(recipe: Recipe | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Recipes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(recipe);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostRecipe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostRecipe(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPostRecipe(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    getRecipeCollection(): Observable<CategoryDto[] | null> {
        let url_ = this.baseUrl + "/api/Recipes/RecipeCollection";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecipeCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecipeCollection(<any>response_);
                } catch (e) {
                    return <Observable<CategoryDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<CategoryDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecipeCollection(response: HttpResponseBase): Observable<CategoryDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryDto[] | null>(<any>null);
    }

    getRecipe(id: number): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Recipes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecipe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecipe(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecipe(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    putRecipe(id: number, recipe: Recipe | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Recipes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(recipe);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutRecipe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutRecipe(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPutRecipe(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    deleteRecipe(id: number): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Recipes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRecipe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRecipe(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRecipe(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IStubClient {
    getFoodType(): Observable<CulturalFoodType[] | null>;
    getMealChoice(): Observable<MealChoice[] | null>;
}

@Injectable()
export class StubClient implements IStubClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getFoodType(): Observable<CulturalFoodType[] | null> {
        let url_ = this.baseUrl + "/api/Stub/GetFoodType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFoodType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFoodType(<any>response_);
                } catch (e) {
                    return <Observable<CulturalFoodType[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<CulturalFoodType[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetFoodType(response: HttpResponseBase): Observable<CulturalFoodType[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CulturalFoodType.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CulturalFoodType[] | null>(<any>null);
    }

    getMealChoice(): Observable<MealChoice[] | null> {
        let url_ = this.baseUrl + "/api/Stub/GetMealChoice";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMealChoice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMealChoice(<any>response_);
                } catch (e) {
                    return <Observable<MealChoice[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<MealChoice[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetMealChoice(response: HttpResponseBase): Observable<MealChoice[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MealChoice.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MealChoice[] | null>(<any>null);
    }
}

export class FoodItem implements IFoodItem {
    id!: number;
    name?: string | undefined;
    allergieFoodItem?: AllergieFoodItem[] | undefined;
    pantryItem?: PantryItem[] | undefined;
    recipeItem?: RecipeItem[] | undefined;
    shoppingListItem?: ShoppingListItem[] | undefined;

    constructor(data?: IFoodItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            if (Array.isArray(data["allergieFoodItem"])) {
                this.allergieFoodItem = [] as any;
                for (let item of data["allergieFoodItem"])
                    this.allergieFoodItem!.push(AllergieFoodItem.fromJS(item));
            }
            if (Array.isArray(data["pantryItem"])) {
                this.pantryItem = [] as any;
                for (let item of data["pantryItem"])
                    this.pantryItem!.push(PantryItem.fromJS(item));
            }
            if (Array.isArray(data["recipeItem"])) {
                this.recipeItem = [] as any;
                for (let item of data["recipeItem"])
                    this.recipeItem!.push(RecipeItem.fromJS(item));
            }
            if (Array.isArray(data["shoppingListItem"])) {
                this.shoppingListItem = [] as any;
                for (let item of data["shoppingListItem"])
                    this.shoppingListItem!.push(ShoppingListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FoodItem {
        data = typeof data === 'object' ? data : {};
        let result = new FoodItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.allergieFoodItem)) {
            data["allergieFoodItem"] = [];
            for (let item of this.allergieFoodItem)
                data["allergieFoodItem"].push(item.toJSON());
        }
        if (Array.isArray(this.pantryItem)) {
            data["pantryItem"] = [];
            for (let item of this.pantryItem)
                data["pantryItem"].push(item.toJSON());
        }
        if (Array.isArray(this.recipeItem)) {
            data["recipeItem"] = [];
            for (let item of this.recipeItem)
                data["recipeItem"].push(item.toJSON());
        }
        if (Array.isArray(this.shoppingListItem)) {
            data["shoppingListItem"] = [];
            for (let item of this.shoppingListItem)
                data["shoppingListItem"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFoodItem {
    id: number;
    name?: string | undefined;
    allergieFoodItem?: AllergieFoodItem[] | undefined;
    pantryItem?: PantryItem[] | undefined;
    recipeItem?: RecipeItem[] | undefined;
    shoppingListItem?: ShoppingListItem[] | undefined;
}

export class AllergieFoodItem implements IAllergieFoodItem {
    id!: number;
    userId!: number;
    foodItemId!: number;
    foodItem?: FoodItem | undefined;
    user?: User | undefined;

    constructor(data?: IAllergieFoodItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.foodItemId = data["foodItemId"];
            this.foodItem = data["foodItem"] ? FoodItem.fromJS(data["foodItem"]) : <any>undefined;
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AllergieFoodItem {
        data = typeof data === 'object' ? data : {};
        let result = new AllergieFoodItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["foodItemId"] = this.foodItemId;
        data["foodItem"] = this.foodItem ? this.foodItem.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAllergieFoodItem {
    id: number;
    userId: number;
    foodItemId: number;
    foodItem?: FoodItem | undefined;
    user?: User | undefined;
}

export class User implements IUser {
    id!: number;
    objectId!: string;
    allergieFoodItem?: AllergieFoodItem[] | undefined;
    mealPlan?: MealPlan[] | undefined;
    pantry?: Pantry[] | undefined;
    shoppingList?: ShoppingList[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.objectId = data["objectId"];
            if (Array.isArray(data["allergieFoodItem"])) {
                this.allergieFoodItem = [] as any;
                for (let item of data["allergieFoodItem"])
                    this.allergieFoodItem!.push(AllergieFoodItem.fromJS(item));
            }
            if (Array.isArray(data["mealPlan"])) {
                this.mealPlan = [] as any;
                for (let item of data["mealPlan"])
                    this.mealPlan!.push(MealPlan.fromJS(item));
            }
            if (Array.isArray(data["pantry"])) {
                this.pantry = [] as any;
                for (let item of data["pantry"])
                    this.pantry!.push(Pantry.fromJS(item));
            }
            if (Array.isArray(data["shoppingList"])) {
                this.shoppingList = [] as any;
                for (let item of data["shoppingList"])
                    this.shoppingList!.push(ShoppingList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["objectId"] = this.objectId;
        if (Array.isArray(this.allergieFoodItem)) {
            data["allergieFoodItem"] = [];
            for (let item of this.allergieFoodItem)
                data["allergieFoodItem"].push(item.toJSON());
        }
        if (Array.isArray(this.mealPlan)) {
            data["mealPlan"] = [];
            for (let item of this.mealPlan)
                data["mealPlan"].push(item.toJSON());
        }
        if (Array.isArray(this.pantry)) {
            data["pantry"] = [];
            for (let item of this.pantry)
                data["pantry"].push(item.toJSON());
        }
        if (Array.isArray(this.shoppingList)) {
            data["shoppingList"] = [];
            for (let item of this.shoppingList)
                data["shoppingList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUser {
    id: number;
    objectId: string;
    allergieFoodItem?: AllergieFoodItem[] | undefined;
    mealPlan?: MealPlan[] | undefined;
    pantry?: Pantry[] | undefined;
    shoppingList?: ShoppingList[] | undefined;
}

export class MealPlan implements IMealPlan {
    id!: number;
    userId!: number;
    createdAt!: Date;
    name?: string | undefined;
    user?: User | undefined;
    mealPlanRecipe?: MealPlanRecipe[] | undefined;

    constructor(data?: IMealPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.createdAt = data["createdAt"] ? new Date(data["createdAt"].toString()) : <any>undefined;
            this.name = data["name"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
            if (Array.isArray(data["mealPlanRecipe"])) {
                this.mealPlanRecipe = [] as any;
                for (let item of data["mealPlanRecipe"])
                    this.mealPlanRecipe!.push(MealPlanRecipe.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MealPlan {
        data = typeof data === 'object' ? data : {};
        let result = new MealPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (Array.isArray(this.mealPlanRecipe)) {
            data["mealPlanRecipe"] = [];
            for (let item of this.mealPlanRecipe)
                data["mealPlanRecipe"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMealPlan {
    id: number;
    userId: number;
    createdAt: Date;
    name?: string | undefined;
    user?: User | undefined;
    mealPlanRecipe?: MealPlanRecipe[] | undefined;
}

export class MealPlanRecipe implements IMealPlanRecipe {
    id!: number;
    mealPlanId!: number;
    recipeId!: number;
    mealPlan?: MealPlan | undefined;
    recipe?: Recipe | undefined;

    constructor(data?: IMealPlanRecipe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.mealPlanId = data["mealPlanId"];
            this.recipeId = data["recipeId"];
            this.mealPlan = data["mealPlan"] ? MealPlan.fromJS(data["mealPlan"]) : <any>undefined;
            this.recipe = data["recipe"] ? Recipe.fromJS(data["recipe"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MealPlanRecipe {
        data = typeof data === 'object' ? data : {};
        let result = new MealPlanRecipe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["mealPlanId"] = this.mealPlanId;
        data["recipeId"] = this.recipeId;
        data["mealPlan"] = this.mealPlan ? this.mealPlan.toJSON() : <any>undefined;
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMealPlanRecipe {
    id: number;
    mealPlanId: number;
    recipeId: number;
    mealPlan?: MealPlan | undefined;
    recipe?: Recipe | undefined;
}

export class Recipe implements IRecipe {
    id!: number;
    name?: string | undefined;
    preperationTime?: string | undefined;
    cookTime?: string | undefined;
    servings?: string | undefined;
    difficulty?: string | undefined;
    energy?: string | undefined;
    fatTotal?: string | undefined;
    saturatedFat?: string | undefined;
    fibre?: string | undefined;
    protein?: string | undefined;
    sodium?: string | undefined;
    carbsSugar?: string | undefined;
    carbsTotal?: string | undefined;
    numIngredients!: number;
    recipeCategoryId!: number;
    recipeCategory?: Category | undefined;
    mealPlanRecipe?: MealPlanRecipe[] | undefined;
    recipeItem?: RecipeItem[] | undefined;
    recipeSteps?: RecipeSteps[] | undefined;

    constructor(data?: IRecipe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.preperationTime = data["preperationTime"];
            this.cookTime = data["cookTime"];
            this.servings = data["servings"];
            this.difficulty = data["difficulty"];
            this.energy = data["energy"];
            this.fatTotal = data["fatTotal"];
            this.saturatedFat = data["saturatedFat"];
            this.fibre = data["fibre"];
            this.protein = data["protein"];
            this.sodium = data["sodium"];
            this.carbsSugar = data["carbsSugar"];
            this.carbsTotal = data["carbsTotal"];
            this.numIngredients = data["numIngredients"];
            this.recipeCategoryId = data["recipeCategoryId"];
            this.recipeCategory = data["recipeCategory"] ? Category.fromJS(data["recipeCategory"]) : <any>undefined;
            if (Array.isArray(data["mealPlanRecipe"])) {
                this.mealPlanRecipe = [] as any;
                for (let item of data["mealPlanRecipe"])
                    this.mealPlanRecipe!.push(MealPlanRecipe.fromJS(item));
            }
            if (Array.isArray(data["recipeItem"])) {
                this.recipeItem = [] as any;
                for (let item of data["recipeItem"])
                    this.recipeItem!.push(RecipeItem.fromJS(item));
            }
            if (Array.isArray(data["recipeSteps"])) {
                this.recipeSteps = [] as any;
                for (let item of data["recipeSteps"])
                    this.recipeSteps!.push(RecipeSteps.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Recipe {
        data = typeof data === 'object' ? data : {};
        let result = new Recipe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["preperationTime"] = this.preperationTime;
        data["cookTime"] = this.cookTime;
        data["servings"] = this.servings;
        data["difficulty"] = this.difficulty;
        data["energy"] = this.energy;
        data["fatTotal"] = this.fatTotal;
        data["saturatedFat"] = this.saturatedFat;
        data["fibre"] = this.fibre;
        data["protein"] = this.protein;
        data["sodium"] = this.sodium;
        data["carbsSugar"] = this.carbsSugar;
        data["carbsTotal"] = this.carbsTotal;
        data["numIngredients"] = this.numIngredients;
        data["recipeCategoryId"] = this.recipeCategoryId;
        data["recipeCategory"] = this.recipeCategory ? this.recipeCategory.toJSON() : <any>undefined;
        if (Array.isArray(this.mealPlanRecipe)) {
            data["mealPlanRecipe"] = [];
            for (let item of this.mealPlanRecipe)
                data["mealPlanRecipe"].push(item.toJSON());
        }
        if (Array.isArray(this.recipeItem)) {
            data["recipeItem"] = [];
            for (let item of this.recipeItem)
                data["recipeItem"].push(item.toJSON());
        }
        if (Array.isArray(this.recipeSteps)) {
            data["recipeSteps"] = [];
            for (let item of this.recipeSteps)
                data["recipeSteps"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRecipe {
    id: number;
    name?: string | undefined;
    preperationTime?: string | undefined;
    cookTime?: string | undefined;
    servings?: string | undefined;
    difficulty?: string | undefined;
    energy?: string | undefined;
    fatTotal?: string | undefined;
    saturatedFat?: string | undefined;
    fibre?: string | undefined;
    protein?: string | undefined;
    sodium?: string | undefined;
    carbsSugar?: string | undefined;
    carbsTotal?: string | undefined;
    numIngredients: number;
    recipeCategoryId: number;
    recipeCategory?: Category | undefined;
    mealPlanRecipe?: MealPlanRecipe[] | undefined;
    recipeItem?: RecipeItem[] | undefined;
    recipeSteps?: RecipeSteps[] | undefined;
}

export class Category implements ICategory {
    id!: number;
    name?: string | undefined;
    imageUri?: string | undefined;
    filters?: string | undefined;
    recipe?: Recipe[] | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.imageUri = data["imageUri"];
            this.filters = data["filters"];
            if (Array.isArray(data["recipe"])) {
                this.recipe = [] as any;
                for (let item of data["recipe"])
                    this.recipe!.push(Recipe.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageUri"] = this.imageUri;
        data["filters"] = this.filters;
        if (Array.isArray(this.recipe)) {
            data["recipe"] = [];
            for (let item of this.recipe)
                data["recipe"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICategory {
    id: number;
    name?: string | undefined;
    imageUri?: string | undefined;
    filters?: string | undefined;
    recipe?: Recipe[] | undefined;
}

export class RecipeItem implements IRecipeItem {
    id!: number;
    recipeId!: number;
    foodItemId!: number;
    pantryItemId!: number;
    qty?: string | undefined;
    unit?: string | undefined;
    note?: string | undefined;
    foodItem?: FoodItem | undefined;
    pantryItem?: PantryItem | undefined;
    recipe?: Recipe | undefined;

    constructor(data?: IRecipeItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.recipeId = data["recipeId"];
            this.foodItemId = data["foodItemId"];
            this.pantryItemId = data["pantryItemId"];
            this.qty = data["qty"];
            this.unit = data["unit"];
            this.note = data["note"];
            this.foodItem = data["foodItem"] ? FoodItem.fromJS(data["foodItem"]) : <any>undefined;
            this.pantryItem = data["pantryItem"] ? PantryItem.fromJS(data["pantryItem"]) : <any>undefined;
            this.recipe = data["recipe"] ? Recipe.fromJS(data["recipe"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RecipeItem {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["recipeId"] = this.recipeId;
        data["foodItemId"] = this.foodItemId;
        data["pantryItemId"] = this.pantryItemId;
        data["qty"] = this.qty;
        data["unit"] = this.unit;
        data["note"] = this.note;
        data["foodItem"] = this.foodItem ? this.foodItem.toJSON() : <any>undefined;
        data["pantryItem"] = this.pantryItem ? this.pantryItem.toJSON() : <any>undefined;
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IRecipeItem {
    id: number;
    recipeId: number;
    foodItemId: number;
    pantryItemId: number;
    qty?: string | undefined;
    unit?: string | undefined;
    note?: string | undefined;
    foodItem?: FoodItem | undefined;
    pantryItem?: PantryItem | undefined;
    recipe?: Recipe | undefined;
}

export class PantryItem implements IPantryItem {
    id!: number;
    pantryId!: number;
    foodItemId!: number;
    qty?: string | undefined;
    unit?: string | undefined;
    foodItem?: FoodItem | undefined;
    pantry?: Pantry | undefined;
    recipeItem?: RecipeItem[] | undefined;

    constructor(data?: IPantryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.pantryId = data["pantryId"];
            this.foodItemId = data["foodItemId"];
            this.qty = data["qty"];
            this.unit = data["unit"];
            this.foodItem = data["foodItem"] ? FoodItem.fromJS(data["foodItem"]) : <any>undefined;
            this.pantry = data["pantry"] ? Pantry.fromJS(data["pantry"]) : <any>undefined;
            if (Array.isArray(data["recipeItem"])) {
                this.recipeItem = [] as any;
                for (let item of data["recipeItem"])
                    this.recipeItem!.push(RecipeItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PantryItem {
        data = typeof data === 'object' ? data : {};
        let result = new PantryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pantryId"] = this.pantryId;
        data["foodItemId"] = this.foodItemId;
        data["qty"] = this.qty;
        data["unit"] = this.unit;
        data["foodItem"] = this.foodItem ? this.foodItem.toJSON() : <any>undefined;
        data["pantry"] = this.pantry ? this.pantry.toJSON() : <any>undefined;
        if (Array.isArray(this.recipeItem)) {
            data["recipeItem"] = [];
            for (let item of this.recipeItem)
                data["recipeItem"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPantryItem {
    id: number;
    pantryId: number;
    foodItemId: number;
    qty?: string | undefined;
    unit?: string | undefined;
    foodItem?: FoodItem | undefined;
    pantry?: Pantry | undefined;
    recipeItem?: RecipeItem[] | undefined;
}

export class Pantry implements IPantry {
    id!: number;
    createdAt?: Date | undefined;
    lastUpdated?: Date | undefined;
    userId!: number;
    user?: User | undefined;
    pantryItem?: PantryItem[] | undefined;

    constructor(data?: IPantry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.createdAt = data["createdAt"] ? new Date(data["createdAt"].toString()) : <any>undefined;
            this.lastUpdated = data["lastUpdated"] ? new Date(data["lastUpdated"].toString()) : <any>undefined;
            this.userId = data["userId"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
            if (Array.isArray(data["pantryItem"])) {
                this.pantryItem = [] as any;
                for (let item of data["pantryItem"])
                    this.pantryItem!.push(PantryItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Pantry {
        data = typeof data === 'object' ? data : {};
        let result = new Pantry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["lastUpdated"] = this.lastUpdated ? this.lastUpdated.toISOString() : <any>undefined;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (Array.isArray(this.pantryItem)) {
            data["pantryItem"] = [];
            for (let item of this.pantryItem)
                data["pantryItem"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPantry {
    id: number;
    createdAt?: Date | undefined;
    lastUpdated?: Date | undefined;
    userId: number;
    user?: User | undefined;
    pantryItem?: PantryItem[] | undefined;
}

export class RecipeSteps implements IRecipeSteps {
    id!: number;
    recipeId!: number;
    stepNumber!: number;
    description?: string | undefined;
    recipe?: Recipe | undefined;

    constructor(data?: IRecipeSteps) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.recipeId = data["recipeId"];
            this.stepNumber = data["stepNumber"];
            this.description = data["description"];
            this.recipe = data["recipe"] ? Recipe.fromJS(data["recipe"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RecipeSteps {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeSteps();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["recipeId"] = this.recipeId;
        data["stepNumber"] = this.stepNumber;
        data["description"] = this.description;
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IRecipeSteps {
    id: number;
    recipeId: number;
    stepNumber: number;
    description?: string | undefined;
    recipe?: Recipe | undefined;
}

export class ShoppingList implements IShoppingList {
    id!: number;
    createdAt?: Date | undefined;
    userId!: number;
    user?: User | undefined;
    shoppingListItem?: ShoppingListItem[] | undefined;

    constructor(data?: IShoppingList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.createdAt = data["createdAt"] ? new Date(data["createdAt"].toString()) : <any>undefined;
            this.userId = data["userId"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
            if (Array.isArray(data["shoppingListItem"])) {
                this.shoppingListItem = [] as any;
                for (let item of data["shoppingListItem"])
                    this.shoppingListItem!.push(ShoppingListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ShoppingList {
        data = typeof data === 'object' ? data : {};
        let result = new ShoppingList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (Array.isArray(this.shoppingListItem)) {
            data["shoppingListItem"] = [];
            for (let item of this.shoppingListItem)
                data["shoppingListItem"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IShoppingList {
    id: number;
    createdAt?: Date | undefined;
    userId: number;
    user?: User | undefined;
    shoppingListItem?: ShoppingListItem[] | undefined;
}

export class ShoppingListItem implements IShoppingListItem {
    id!: number;
    shoppingListId!: number;
    qty?: string | undefined;
    unit?: string | undefined;
    foodItemId!: number;
    foodItem?: FoodItem | undefined;
    shoppingList?: ShoppingList | undefined;

    constructor(data?: IShoppingListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.shoppingListId = data["shoppingListId"];
            this.qty = data["qty"];
            this.unit = data["unit"];
            this.foodItemId = data["foodItemId"];
            this.foodItem = data["foodItem"] ? FoodItem.fromJS(data["foodItem"]) : <any>undefined;
            this.shoppingList = data["shoppingList"] ? ShoppingList.fromJS(data["shoppingList"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ShoppingListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ShoppingListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["shoppingListId"] = this.shoppingListId;
        data["qty"] = this.qty;
        data["unit"] = this.unit;
        data["foodItemId"] = this.foodItemId;
        data["foodItem"] = this.foodItem ? this.foodItem.toJSON() : <any>undefined;
        data["shoppingList"] = this.shoppingList ? this.shoppingList.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IShoppingListItem {
    id: number;
    shoppingListId: number;
    qty?: string | undefined;
    unit?: string | undefined;
    foodItemId: number;
    foodItem?: FoodItem | undefined;
    shoppingList?: ShoppingList | undefined;
}

export class CategoryDto implements ICategoryDto {
    img?: string | undefined;
    name?: string | undefined;
    filters?: string[] | undefined;

    constructor(data?: ICategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.img = data["img"];
            this.name = data["name"];
            if (Array.isArray(data["filters"])) {
                this.filters = [] as any;
                for (let item of data["filters"])
                    this.filters!.push(item);
            }
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["img"] = this.img;
        data["name"] = this.name;
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item);
        }
        return data; 
    }
}

export interface ICategoryDto {
    img?: string | undefined;
    name?: string | undefined;
    filters?: string[] | undefined;
}

export class CulturalFoodType implements ICulturalFoodType {
    id!: number;
    foodType?: string | undefined;

    constructor(data?: ICulturalFoodType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.foodType = data["foodType"];
        }
    }

    static fromJS(data: any): CulturalFoodType {
        data = typeof data === 'object' ? data : {};
        let result = new CulturalFoodType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["foodType"] = this.foodType;
        return data; 
    }
}

export interface ICulturalFoodType {
    id: number;
    foodType?: string | undefined;
}

export class MealChoice implements IMealChoice {
    id!: number;
    mealChoiceType?: string | undefined;

    constructor(data?: IMealChoice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.mealChoiceType = data["mealChoiceType"];
        }
    }

    static fromJS(data: any): MealChoice {
        data = typeof data === 'object' ? data : {};
        let result = new MealChoice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["mealChoiceType"] = this.mealChoiceType;
        return data; 
    }
}

export interface IMealChoice {
    id: number;
    mealChoiceType?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}